<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Name is ali88.It is my Hugo Host First.</title>
    <link>http://ali88code.github.io/</link>
    <description>Recent content on My Name is ali88.It is my Hugo Host First.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Mar 2016 01:24:51 -0500</lastBuildDate>
    <atom:link href="http://ali88code.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nginx_Fastcgi_Cache &#43; Lua 執行過程</title>
      <link>http://ali88code.github.io/NginxFastcgiCache/</link>
      <pubDate>Sun, 06 Mar 2016 01:24:51 -0500</pubDate>
      
      <guid>http://ali88code.github.io/NginxFastcgiCache/</guid>
      <description>

&lt;h1 id=&#34;nginx-proxy-cache:1246daae3ebb4ac275b8ba8e055bf6ad&#34;&gt;Nginx Proxy Cache&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;應用於Reverse Proxy,負載均衡&lt;/li&gt;
&lt;li&gt;作用是緩存後端服務器的內容，可能是任何內容，包括靜態的和動態&lt;/li&gt;
&lt;li&gt;另外,也可作正向代理 (Nginx 這邊支援 web proxy)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/nginx_cache.jpeg&#34; alt=&#34;Nginx_Proxy_Cache&#34; title=&#34;Nginx_Proxy_Cache&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;nginx-fastcgi-cache:1246daae3ebb4ac275b8ba8e055bf6ad&#34;&gt;Nginx Fastcgi Cache&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;proxy_cache 與 fastcgi_cache功能大至一樣。&lt;/li&gt;
&lt;li&gt;用是緩存fastcgi生成的內容，很多情況是php生成的動態的內容。&lt;/li&gt;
&lt;li&gt;緩存作用。減少了nginx與Application(php,python,cgi等等)通信的次數。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;images/nginx_Fastcgi_cache.jpeg&#34; alt=&#34;Nginx_Fastcgi_Cache&#34; title=&#34;Nginx_Fastcgi_Cache&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;參考資料:1246daae3ebb4ac275b8ba8e055bf6ad&#34;&gt;參考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html&#34;&gt;Module ngx_http_fastcgi_module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://czerasz.com/2015/03/30/nginx-caching-tutorial/&#34;&gt;Nginx Caching Tutorial - You Can Run Faster&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>http://ali88code.github.io/hugo/</link>
      <pubDate>Sun, 24 Jan 2016 09:03:05 -0500</pubDate>
      
      <guid>http://ali88code.github.io/hugo/</guid>
      <description>

&lt;h2 id=&#34;安裝hugo:32ab7241d48fcc174c877413a917f8cf&#34;&gt;安裝hugo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用官網釋出的二進檔 &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;hugo下載處&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用Binary安裝&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /usr/local/src 
wget  https://github.com/spf13/hugo/releases/download/v0.15/hugo_0.15_linux_amd64.tar.gz
tar zxvf  hugo_0.15_linux_amd64.tar.gz  -C /usr/bin/
cd /usr/bin/
ln -s hugo_0.15_linux_amd64/hugo_0.15_linux_amd64  hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hugo快速開始:32ab7241d48fcc174c877413a917f8cf&#34;&gt;hugo快速開始&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;建立框架到自訂的路徑&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hugo new site  /var/www/html/ali88/ 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;建立內容&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /var/www/html/ali77/
hugo new  hugo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;編輯內容 /var/www/html/ali77/content/hugo.md&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-01-24T03:49:06-05:00&amp;quot;
draft = true
title = &amp;quot;hugo&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Install some themes  &lt;a href=&#34;https://github.com/spf13/hugoThemes&#34;&gt;官方themes 下載路徑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /var/www/html/ali77/
git clone https://github.com/Zenithar/hugo-theme-crisp  themes/crisp
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;簡單開啟一個web server 測試&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;預設hugo 會開啟 127.0.0.1:1313。為了方便透過外網IP(假設為 188.166.241.76:1313)連接到內部Lookback IP 127.0.0.1:1313,這邊使用
iptable DNAT機制的port  forwarding來達到此目的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;iptables  -I PREROUTING -p tcp -m tcp --dport 1313 -j DNAT --to-destination 127.0.0.1:1313
sysctl -w net.ipv4.conf.all.route_localnet=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用hugo server 指令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd /var/www/html/ali77/
hugo server  --buildDrafts --theme=crisp --baseURL=&amp;quot;http://188.166.241.76/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;參考資料:32ab7241d48fcc174c877413a917f8cf&#34;&gt;參考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.bpcoder.com/2015/12/hugo-create-blog/&#34;&gt;利用 Hugo &amp;amp; GitHub 搭建個人博客靜態網站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>gitT2</title>
      <link>http://ali88code.github.io/gitT2/</link>
      <pubDate>Sun, 24 Jan 2016 08:45:18 -0500</pubDate>
      
      <guid>http://ali88code.github.io/gitT2/</guid>
      <description>

&lt;h1 id=&#34;第-06-天-解析-git-資料結構-物件結構:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;第 06 天：解析 Git 資料結構 - 物件結構&lt;/h1&gt;

&lt;p&gt;在 Git 的資料結構中，「物件」是一種「不可變的」 (immutable) 檔案類型，所有儲存在「物件儲存區」的檔案通常只進不出，也不會被修改內容。原因在於，如果你竄改了檔案了內容，新的內容所運算出來的 SHA1 雜湊值將會與原有物件的檔名不一樣，這導致 Git 無法繼續執行，相對地也對 Git 儲存庫產生了一定程度的保護作用。本篇文章，將更加仔細地介紹 Git 的物件結構，最後也會透過一則影片，詳細解說整個物件被產生的過程與邏輯。&lt;/p&gt;

&lt;h2 id=&#34;關於物件資料庫:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;關於物件資料庫&lt;/h2&gt;

&lt;p&gt;前一篇文章有提到，無論 blob 物件與 tree 物件，這些都算是物件，這些物件都會儲存在一個所謂的「物件儲存區」 (object storage) 之中，而這個「物件儲存區」預設就在「儲存庫」的 objects 目錄下，如下圖示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://f.cloud.github.com/assets/88981/1143067/2b2e2c52-1d17-11e3-953c-ba8ea3749749.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然而 Git 儲存庫中的每一個「物件」，都是以「檔案內容」進行 SHA1 雜湊運算出一個 hash 值，並用這個 hash 值當作物件的名稱 (檔名)。我們以 8a6b275638f3cf164395e65066a1132bb36b7896 為例，Git 會先拿前兩個字元(8a)當作目錄，然後把剩下的 hash 值當成檔名 (6b275638f3cf164395e65066a1132bb36b7896)，這些物件的實體目錄與檔案也都會放在 .git\objects 目錄下，如下圖示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://f.cloud.github.com/assets/88981/1114191/87b5e156-1a13-11e3-9355-9524a3f651b2.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;物件的類型:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;物件的類型&lt;/h2&gt;

&lt;p&gt;在這些「物件資料庫」裡面，又包含了 4 種物件類型，分別是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;blob 物件&lt;/strong&gt;：就是工作目錄中某個檔案的 &amp;ldquo;內容&amp;rdquo;，且只有內容而已，當你執行 git add 指令的同時，這些新增檔案的內容就會立刻被寫入成為 blob 物件，檔名則是物件內容的雜湊運算結果，沒有任何其他其他資訊，像是檔案時間、原本的檔名或檔案的其他資訊，都會儲存在其他類型的物件裡 (也就是 tree 物件)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tree 物件&lt;/strong&gt;：這類物件會儲存特定目錄下的所有資訊，包含該目錄下的檔名、對應的 blob 物件名稱、檔案連結(symbolic link) 或其他 tree 物件等等。由於 tree 物件可以包含其他 tree 物件，所以瀏覽 tree 物件的方式其實就跟檔案系統中的「資料夾」沒兩樣。簡單來說，tree 物件這就是在特定版本下某個資料夾的快照(Snapshot)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;commit 物件&lt;/strong&gt;：用來記錄有那些 tree 物件包含在版本中，一個 commit 物件代表著 Git 的一次提交，記錄著特定提交版本有哪些 tree 物件、以及版本提交的時間、紀錄訊息等等，通常還會記錄上一層的 commit 物件名稱 (只有第一次 commit 的版本沒有上層 commit 物件名稱。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tag 物件&lt;/strong&gt;：是一個容器，通常用來關聯特定一個 commit 物件 (也可以關聯到特定 blob、tree 物件)，並額外儲存一些額外的參考資訊(metadata)，例如: tag 名稱。使用 tag 物件最常見的情況是替特定一個版本的 commit 物件標示一個易懂的名稱，可能是代表某個特定發行的版本，或是擁有某個特殊意義的版本。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Git 會將每一個版本中的檔案建立一個對應的 blob 物件，一樣的，該 blob 物件的檔名就是用上述的方式計算出來的，從這些 blob 檔案，你看不出跟版本有任何關係，你必須透過 tree 物件 (資料夾的快照) 與 commit 物件 (每一個版本的快照) 才能關聯出這些 blob 與版本的關係。&lt;/p&gt;

&lt;p&gt;所有的物件都會以 zlib 演算法進行壓縮，不但可以有效的提升檔案存取效率，在日後進行封裝(pack)的時候也可以利用差異壓縮(delta compression)演算法來節省空間。他會自動找出相似的 blobs，並自動計算出 blob 之間的變化差異，再將這些差異儲存在一個名為 &lt;em&gt;packfile&lt;/em&gt; 的檔案中，這樣就可以大幅節省磁碟空間的耗用)。通常 &lt;em&gt;packfile&lt;/em&gt; 會置於 .git\objects\pack 目錄下，如下圖示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://f.cloud.github.com/assets/88981/1143218/3626d60c-1d28-11e3-93b4-cd5ec3419b7d.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上述這四種物件之間的關係，可參考以下圖示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://journal.code4lib.org/media/issue21/anderson/images/large/fig-09-git-revisions.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然而，光是觀看文字與圖示，或許還是難以看出這幾種物件類型之間的關係，沒關係，筆者特別錄製了一段教學影片，試圖用 git 指令的方式解釋 Git 的物件結構與產生物件的過程，也讓各位更清楚的了解到底 Git 如何產生與管理這些檔案。&lt;/p&gt;

&lt;p&gt;YouTube 影片連結：&lt;a href=&#34;http://www.youtube.com/watch?v=PZbSRy_ow0U&#34;&gt;認識 Git 資料結構中的物件資料庫與物件之間的關係&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;物件結構的優點:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;物件結構的優點&lt;/h2&gt;

&lt;p&gt;你應該可以漸漸了解 Git 的「物件」設計是如此的漂亮，我們在第一篇文章曾經提到幾個 Git 重要的設計，我們重新列出幾點與「物件」特性有關的設計來看看：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有效率的處理大型專案

&lt;ul&gt;
&lt;li&gt;不僅僅是完整的版本庫會複製(clone)一份在本機，由於所有的 blob 物件都是透過「內容」來做定址的 (content addressable)，因此，若在不同版本之間找尋相同的內容，效率是非常高的。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;歷史紀錄保護

&lt;ul&gt;
&lt;li&gt;Git 版控的過程，每次提交變更都會產生一個 commit 物件，而這個 commit 物件的名稱又是透過 commit 物件的內容產生。再者，commit 物件會關連到 tree 物件，tree 物件的名稱又是透過 tree 物件的內容所產生。tree 物件又會關聯到 blob 與 tree 物件，這些物件的名稱也是透過內容產生。就這樣一層一層的關聯下去，如果你今天真的想竄改某個版本的歷史紀錄，困難度也是挺高的！&lt;/li&gt;
&lt;li&gt;由於 Git 儲存庫經常會被 clone 或 fork，只要是被 clone 過的儲存庫，來源的儲存庫只要任何一個物件被修改，這些 clone 出去的儲存庫就很難再合併回來，所以你幾乎不可能任意竄改版本紀錄。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;定期的封裝物件

&lt;ul&gt;
&lt;li&gt;我們在 Git 中提到的 &amp;ldquo;物件&amp;rdquo; 其實就是代表版本庫中的一個檔案。而在版本異動的過程中，專案中的程式碼或其他檔案會被更新，每次更新時，只要檔案內容不一樣，就會建立一個新的 &amp;ldquo;物件&amp;rdquo;，這些不同內容的檔案全部都會保留下來。&lt;/li&gt;
&lt;li&gt;你應該可以想像，當一個專案越來越大、版本越來越多時，這個物件會越來越多，雖然每個檔案都可以各自壓縮讓檔案變小，不過過多的檔案還是會檔案存取變得越來越沒效率。因此 Git 的設計有個機制可以將一群老舊的 &amp;ldquo;物件&amp;rdquo; 自動封裝進一個封裝檔(packfile)中，以改善檔案存取效率。&lt;/li&gt;
&lt;li&gt;那些新增的檔案還是會以單一檔案的方式存在著，也代表一個 Git 版本庫中的 &amp;ldquo;檔案&amp;rdquo; 就是一個 Git &amp;ldquo;物件&amp;rdquo;，但每隔一段時間就會需要重新封裝(repacking)。&lt;/li&gt;
&lt;li&gt;照理說 Git 會自動執行重新封裝等動作，但你依然可以自行下達指令執行。例如: git gc&lt;/li&gt;
&lt;li&gt;如果你要檢查 Git 維護的檔案系統是否完整，可以執行以下指令: git fsck&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;今日小結:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;今日小結&lt;/h2&gt;

&lt;p&gt;Git 裡的「物件」十分重要，其特性也十分重要，雖然我們在操作 Git 指令的過程中通常不太需要直接接觸這些檔案，不過了解這些物件的存在，也確實有助於讓你更加理解 Git 的運作模式，與 Git 獨到的設計概念。&lt;/p&gt;

&lt;h2 id=&#34;參考連結:cae9e3640134477bd0abf2bb811c43a6&#34;&gt;參考連結&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/book/en/Git-Internals-Git-Objects&#34;&gt;Git Internals - Git Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://progit.org/&#34;&gt;Pro Git Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_tw/&#34;&gt;Git Magic - 繁體中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Git_(software&#34;&gt;Git (software) - Wikipedia, the free encyclopedia&lt;/a&gt; &amp;ldquo;Git (software) - Wikipedia, the free encyclopedia&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>gitT</title>
      <link>http://ali88code.github.io/gitT/</link>
      <pubDate>Sun, 24 Jan 2016 08:41:12 -0500</pubDate>
      
      <guid>http://ali88code.github.io/gitT/</guid>
      <description>

&lt;h1 id=&#34;第-01-天-認識-git-版本控管:d1a88bf24ad900859c1971a88408397d&#34;&gt;第 01 天：認識 Git 版本控管&lt;/h1&gt;

&lt;p&gt;筆者使用 Subversion (SVN) 已經將近 10 年，從來都不覺得有任何必要轉換至其他版本控管平台，直到前幾年因應雲端化的改變，慢慢導入 TFS 版本控管 (TFS Service)，轉換的過程還算順利，只因為 SVN 與 TFS 的版本控管概念相近，都屬於集中式版本控管系統。這類集中式版本控管系統，使用上簡單、直覺且容易進行權限控管，說真的，在大部分的開發情境下，Subversion 或 TFS 已經相當足夠，那又是甚麼契機或是需求，迫使我們一定要轉換到 Git 版本控管呢？我相信，不同人採用 Git 一定有他的理由，有些人覺得好玩、有些人覺得新鮮、有些人覺得功能強大，無論如何，只要這個理由能夠支持你去主動認識一個陌生技術，都是好的，本篇文章除了帶大家認識 Git 版本控管機制外，也會說說我想轉換到 Git 的理由。&lt;/p&gt;

&lt;h2 id=&#34;文章目的:d1a88bf24ad900859c1971a88408397d&#34;&gt;文章目的&lt;/h2&gt;

&lt;p&gt;在軟體開發領域，對原始碼進行版本控管是非常重要的一件事，有別於 Subversion 或 TFVC (Team Foundation Version Control) 這類集中式版本控管系統，Git 是一套分散式版本控管系統(DVCS; Distributed Version Control System)，並帶來許多版本控管上的各種優勢與解決傳統集中式版本控管的缺失，例如支援本地操作、備份容易、功能強大且彈性的分支與合併等等。不過，由於 Git 版本控管無論在版控觀念與工具使用上，都與傳統集中式版控工具差異甚大，因此造成了不小的學習門檻。&lt;/p&gt;

&lt;p&gt;雖然說本次文章的主題是「30 天精通 Git 版本控管」，不過，說實在的，還真有點言過其實了，因為 Git 博大精深，有非常多細節可以探究，如果真的要應用在工作上，學幾天可以真正上手呢？每天學一點，連續學習 30 天，似乎是個合理的數字 (或太多?)，如果有一個工具大家都要用，而且要立刻上手的工具，如果學 30 天都還不知道怎麼活用，那這學習門檻也太高了些。因此我想，這個系列的文章，主要還是專注於「如何在 30 天內學會 Git 版本控管，而且必須要能熟練的應用在實務開發工作上」，這才是本系列的真正目的，那些繁瑣的細節，我不會特別強調，但總是有些重要的概念與細節還是不能錯過，我會嘗試在每一個主題中提到一部份，一有機會就會深入探討，希望大家可以透過做中學，深刻體會 Git 版本控管的強大魅力。&lt;/p&gt;

&lt;h2 id=&#34;轉換的契機:d1a88bf24ad900859c1971a88408397d&#34;&gt;轉換的契機&lt;/h2&gt;

&lt;p&gt;這幾個月，公司因為有個大型專案，參與開發人數超過 12 人，最後大家決議採用 Git 作為本次專案的版本控管機制，與其說我們採用了 Git 版本控管，其實真正採用的原因是「我們選擇使用 GitHub 當成我們的版控平台」，原因就是 GitHub 平台實在整合得太好，完整的 Git 版控支援、議題追蹤與管理、線上 Wiki 文件管理、友善的原始碼審核(Code Review)介面。這些特性，都能有效協助我們在多人協同開發的過程中，減少團隊溝通的問題。&lt;/p&gt;

&lt;p&gt;剛開始接觸 Git 說實在挺辛苦的，因為 Git 版本控管的觀念，實在與 Subversion 差太多，沒有辦法很直覺的去體會其差異，就算給了你 GUI 圖形化工具介面，你也不見得就會使用。你知道的，一個強大又好用的工具在你手上，「錯誤的使用方式」比「不會用」還可怕！說穿了，就是你必須先建立一套思維模式(Mindset)，了解 Git 的運作原理，然後再上手使用 Git 相關工具 (無論是指令列工具或圖形化介面工具)，才是正途！&lt;/p&gt;

&lt;h2 id=&#34;學習的方法:d1a88bf24ad900859c1971a88408397d&#34;&gt;學習的方法&lt;/h2&gt;

&lt;p&gt;我在剛學習 Git 的時候，看了好幾本書 (其實是挑重點看)，也看了許多線上的文章與簡報，甚至還看了好幾部教學影片，看著看著，確實可以學會如何使用 Git 工具，我覺得並不會太過艱深。不過，Git 的指令與參數非常多，完全超出大腦能記憶的範圍，除非每天使用，否則哪有可能一天到晚打指令進行版控，如果每次要使用 Git 指令都要查書的話，那這也太沒效率了點，當下的我就直覺地認為，學習 Git 最終還是要回歸到好用的 GUI 工具，否則這東西在團隊中可能不容易推廣。&lt;/p&gt;

&lt;p&gt;再者，因為 Git 是屬於「分散式版本控管」機制，當開發人數開始變多，版本庫又開始變成一人一份時，在第一次進行多人分支與合併的過程時，大家都飽受煎熬，而且持續一段不短的時間。雖然公司內部有先進行技術分享，不過由於大家都是第一次學，那些 Git 的抽象概念，還沒辦法深植人心，只能基於 Git 的使用方法進行分享，例如工具怎麼用、有哪些常用的指令、甚麼特殊的情況下應該下甚麼指令，諸如此類的。過程中就算說出了複雜的原理，由於大家對於 Git 的認知還很模糊，不同人對 Git 版控方式的理解也不盡相同，所吸收到的知識與概念，也不一定一致。所以，雖然上完課了，大家還是需要好幾天的時間不斷磨合，相互討論，互相解決問題，如果你只有一人使用 Git 的話，確實不容易感受 Git 帶來的好處，也恐怕不容易堅持下去。&lt;/p&gt;

&lt;p&gt;所以，我認為，要學好 Git 版本控管，若先知道以下幾點，也許比較容易學會：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先擁有 Git 基礎觀念，透過下指令的方式學習是最快的方式，不要跳過這一段&lt;/li&gt;
&lt;li&gt;找多一點人跟你一起學 Git 版本控管，最好能直接用在實務的開發工作上&lt;/li&gt;
&lt;li&gt;團隊中最好要有幾個先遣部隊，可以多學一點 Git 觀念，好分享給其他人，或有人卡關時，能適時提供協助&lt;/li&gt;
&lt;li&gt;了解 Git 屬於「分散式版本控管」，每個人都有一份完整的儲存庫(Repository)，所以必須經常合併檔案&lt;/li&gt;
&lt;li&gt;使用 Git 的時候，分支與合併是常態，但只要有合併，就會有衝突，要學會如何解決衝突&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;認識-git-版本控管:d1a88bf24ad900859c1971a88408397d&#34;&gt;認識 Git 版本控管&lt;/h2&gt;

&lt;p&gt;Git 的出現，來自於 Linux 之父 &amp;ldquo;Linus Torvalds&amp;rdquo; 開發 Linux kernel 的時候，因為早期的版本控制方法非常沒有效率，屬集中式控管，當 Linux kernel 這類複雜又龐大的專案在進行版本控管時，出現了許多問題。最早期 Linux kernel 採用  BitKeeper 進行版本控管，但後來 Linus Torvalds 基於 BitKeeper 與 Monotone 的使用經驗，設計出更棒的 Git 版控系統。原先 Git 只被設計成一個低階的版控工具，用來當做其他版控系統(SCM)的操作工具，後來才漸漸演變成一套完整的版本控制系統。&lt;/p&gt;

&lt;p&gt;有趣的是，Linus Torvalds 改採 Git 進行版本控管初期，由於 Git 太過複雜，許多版控觀念跟以往差異太大，也受到世界各地開放原始碼社群的反對，但經過幾年的努力與發展，操作 Git 的相關工具也越來越成熟，才漸漸平撫反對的壓力，從 2013 年的市場調查看來，全世界已有 30% 的開放原始碼專案改採 Git 進行版本控管，這是個非常驚人的市占率，意謂著 Git 絕對有其驚豔之處，不好好研究一番還不行呢！&lt;/p&gt;

&lt;p&gt;講到 Git 的架構，完全是基於 Linus Torvalds 在維護 Linux kernel 這個大型專案時得到的經驗，以及他本身在檔案系統優化方面的豐富經驗進行設計，也因為這樣，Git 包含了以下幾個重要的設計：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;強力支援非線性開發模式 (分散式開發模式)

&lt;ul&gt;
&lt;li&gt;Git 擁有快速的分支與合併機制，還包括圖形化的工具顯示版本變更的歷史路徑。&lt;/li&gt;
&lt;li&gt;Git 非常強調分支與合併，所以版本控管的過程中，你會不斷的在執行分支與合併動作。&lt;/li&gt;
&lt;li&gt;Git 的分支機制非常輕量，沒有負擔，每一次的分支只是某個 commit 的參考指標而已。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;分散式開發模型

&lt;ul&gt;
&lt;li&gt;參與 Git 開發的每個人，都將擁有完整的開發歷史紀錄。&lt;/li&gt;
&lt;li&gt;當開發人員第一次將 Git 版本庫複製(clone)下來後，完全等同於這份 Git 版本庫的「完整備份」。&lt;/li&gt;
&lt;li&gt;整個版本庫中所有變更過的檔案與歷史紀錄，通通都會儲存在本機儲存庫(local repository)。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;相容於現有作業系統

&lt;ul&gt;
&lt;li&gt;Git 版本庫其實就只是一個資料夾而已，資料夾中有許多相關的設定檔與各種 blob 物件檔案而已。&lt;/li&gt;
&lt;li&gt;Git 版本庫可以用任何方式發布，所以你用 HTTP, FTP, rsync, SSH 甚至於用 Git protocol 都可以當成存取 Git 版本庫的媒介，相容性極高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有效率的處理大型專案

&lt;ul&gt;
&lt;li&gt;由於完整的版本庫會複製(clone)一份在本機，該版本庫包含完整的檔案與版本變更紀錄，所以針對版本控管中的各種檔案操作速度，將會比直接從遠端存取來的快上百倍之多。&lt;/li&gt;
&lt;li&gt;這也代表著，Git 版本控管不會因為專案越來越大、檔案越來越多，而導致速度變慢。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;歷史紀錄保護

&lt;ul&gt;
&lt;li&gt;Git 版控的過程，每次 commit 都會產生一組 hash id 編號，而且每個版本在變化的過程都會參考到這個 hash id，只要 hash id 無法比對的上，Git 就會無法運作，所以當專案越來越大，版本庫複製(clone)的越來越多份，你幾乎無法竄改檔案的內容或版本紀錄。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;請記得: 每個人都有一份完整的版本庫，你改了原始的那份，所有人的版本庫就無法再合併回原本的版本庫了，所以你幾乎不可能任意竄改版本紀錄。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;以工具集為主的設計 (Toolkit-based design)

&lt;ul&gt;
&lt;li&gt;Git 被設計成一個一個的工具軟體(指令列工具)，你可以很輕易的組合不同工具的使用，使用上非常彈性。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;彈性的合併策略 (Pluggable merge strategies)

&lt;ul&gt;
&lt;li&gt;Git 有一個擁有良好設計的「不完整合併(incomplete merge)」 機制，以及多種可以完成合併的演算法，並在最後告知使用者為何無法自動完成合併，或通知你需要手動進行合併動作。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;被動的垃圾回收機制

&lt;ul&gt;
&lt;li&gt;在使用 Git 的時候，若想要中斷目前的操作或回復上一個操作，都是可以的，你完全可以不必擔心可能有其中一個指令下錯，或指令執行到一半當機等問題。&lt;/li&gt;
&lt;li&gt;Git 的垃圾回收機制，其實就是那些殘留在檔案系統中的無用檔案，這個垃圾回收機制只會在這些無用的物件累積一段時間後自動執行，或你也可以自行下達指令清空它。例如: git gc &amp;ndash;prune&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;定期的封裝物件

&lt;ul&gt;
&lt;li&gt;我們在 Git 中提到的 &amp;ldquo;物件&amp;rdquo; 其實就是代表版本庫中的一個檔案。而在版本異動的過程中，專案中的程式碼或其他檔案會被更新，每次更新時，只要檔案內容不一樣，就會建立一個新的 &amp;ldquo;物件&amp;rdquo;，這些不同內容的檔案全部都會保留下來。&lt;/li&gt;
&lt;li&gt;你應該可以想像，當一個專案越來越大、版本越來越多時，這個物件會越來越多，雖然每個檔案都可以各自壓縮讓檔案變小，不過過多的檔案還是會檔案存取變得越來越沒效率。因此 Git 的設計有個機制可以將一群老舊的 &amp;ldquo;物件&amp;rdquo; 自動封裝進一個封裝檔(packfile)中，以改善檔案存取效率。&lt;/li&gt;
&lt;li&gt;那些新增的檔案還是會以單一檔案的方式存在著，也代表一個 Git 版本庫中的 &amp;ldquo;檔案&amp;rdquo; 就是一個 Git &amp;ldquo;物件&amp;rdquo;，但每隔一段時間就會需要重新封裝(repacking)。&lt;/li&gt;
&lt;li&gt;照理說 Git 會自動執行重新封裝等動作，但你依然可以自行下達指令執行。例如: git gc&lt;/li&gt;
&lt;li&gt;如果你要檢查 Git 維護的檔案系統是否完整，可以執行以下指令: git fsck&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;關於 Git 的分散式版控系統，我再重申幾件事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git 完全不需要伺服器端的支援就可以運作版本控制，因為每個人都有一份完整的儲存庫副本。&lt;/li&gt;
&lt;li&gt;因為每個人都有一份完整的儲存庫副本，所以每次提交版本變更時，都僅提交到本地的儲存庫而已，因此提交速度非常快，也不用網路連線，可大幅節省開發時間。&lt;/li&gt;
&lt;li&gt;由於每個人都有一份完整的儲存庫副本，代表著在使用 Git 版本控管時，沒有所謂的「權限控管」這件事，每個成員都能把儲存庫複製(clone)回來，也都可以在本地提交變更，沒有任何權限可以限制。使用 Git 時，唯一能設定的權限是，你有沒有權利存取上層儲存庫(upstream repository)或遠端儲存庫(remote repository)的權限。&lt;/li&gt;
&lt;li&gt;如果需要跟別人交換變更後的版本，隨時可以透過「合併」的方式進行，Git 擁有非常強悍的合併追蹤（merge tracing）能力。&lt;/li&gt;
&lt;li&gt;要合併多人的版本，你只要有存取共用儲存庫(shared repository)的權限或管道即可。
&lt;strong&gt;例如：在同一台伺服器上可以透過資料夾權限進行共用，或透過 SSH 遠端存取另一台伺服器的 Git 儲存庫，也可以透過 Web 伺服器等方式來共用 Git 儲存庫。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;今日小結:d1a88bf24ad900859c1971a88408397d&#34;&gt;今日小結&lt;/h2&gt;

&lt;p&gt;今天這篇只是個大致介紹，若看不太懂 Git 的設計理念沒關係，你可以用一段時間之後再回來看這篇文章，或許會有更深一層的體會。&lt;/p&gt;

&lt;p&gt;我覺得要寫「認識 Git 版本控管」比教大家怎麼用還難許多，以下我在列出一些 Git 相關連結，供大家進一步學習。&lt;/p&gt;

&lt;h2 id=&#34;參考連結:d1a88bf24ad900859c1971a88408397d&#34;&gt;參考連結&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Git_(software&#34;&gt;Git (software) - Wikipedia, the free encyclopedia&lt;/a&gt; &amp;ldquo;Git (software) - Wikipedia, the free encyclopedia&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://progit.org/&#34;&gt;Pro Git Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_tw/&#34;&gt;Git Magic - 繁體中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ascc.sinica.edu.tw/iascc/articals.php?_section=2.4&amp;amp;_op=?articalID:4811&#34;&gt;簡介 Git 及使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zh.wikipedia.org/wiki/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&#34;&gt;版本控制 - 維基百科，自由的百科全書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>